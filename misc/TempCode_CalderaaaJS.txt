import React, { useState } from 'react';
import './Calendara.css'; // Import the CSS file

function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());

  // Function to get the days in a month for the current date
  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    const firstDayOfWeek = new Date(year, month, 1).getDay(); // 0 = Sunday, 1 = Monday, ...

    const daysInMonth = [];

    // Fill in the days before the first day of the month with empty slots
    for (let i = 0; i < firstDayOfWeek; i++) {
      daysInMonth.push(null);
    }

    // Fill in the days of the month
    for (let day = 1; day <= lastDay; day++) {
      daysInMonth.push(day);
    }

    return daysInMonth;
  };

  const daysInMonth = getDaysInMonth();
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  return (
    <div className="calendar-container">
      <header>
        <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1))}>
          Previous Month
        </button>
        <h2>
          {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
        </h2>
        <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1))}>
          Next Month
        </button>
      </header>

      <table>
        <thead>
          <tr>
            {daysOfWeek.map(day => (
              <th key={day}>{day}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {daysInMonth.reduce((rows, day, index) => {
            if (index % 7 === 0) rows.push([]);
            rows[rows.length - 1].push(day);
            return rows;
          }, []).map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((day, cellIndex) => (
                <td key={cellIndex}>{day}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Calendar;

==========


import React, { useState } from 'react';
import './Calendar.css'; // Import the CSS file

function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());

  // Function to get the days in a month for the current date
  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    const firstDayOfWeek = new Date(year, month, 1).getDay(); // 0 = Sunday, 1 = Monday, ...

    const daysInMonth = [];

    // Fill in the days before the first day of the month with empty slots
    for (let i = 0; i < firstDayOfWeek; i++) {
      daysInMonth.push(null);
    }

    // Fill in the days of the month
    for (let day = 1; day <= lastDay; day++) {
      daysInMonth.push(day);
    }

    return daysInMonth;
  };

  const daysInMonth = getDaysInMonth();
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  return (
    <div className="calendar-container">
      <table>
        <thead>
          <tr>
            <th>
              <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1))}>
                Previous Month
              </button>
            </th>
            <th colSpan="5">
              {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
            </th>
            <th>
              <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1))}>
                Next Month
              </button>
            </th>
          </tr>
          <tr>
            {daysOfWeek.map(day => (
              <th key={day}>{day}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {daysInMonth.reduce((rows, day, index) => {
            if (index % 7 === 0) rows.push([]);
            rows[rows.length - 1].push(day);
            return rows;
          }, []).map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((day, cellIndex) => (
                <td key={cellIndex}>{day}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Calendar;
========================

import React, { useState } from 'react';
import './Calendar.css'; // Import the CSS file

function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());

  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    const firstDay = new Date(year, month, 1).getDay(); // 0 = Sunday, 1 = Monday, ...

    const daysInMonth = [];

    // Fill in the days before the first day of the month with empty slots
    for (let i = 0; i < firstDay; i++) {
      daysInMonth.push(null);
    }

    // Fill in the days of the month
    for (let day = 1; day <= lastDay; day++) {
      daysInMonth.push(day);
    }

    return daysInMonth;
  };

  const daysInMonth = getDaysInMonth();
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  return (
    <div className="calendar-container">
      <table>
        <thead>
          <tr>
            <th>
              <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1))}>
                Previous Month
              </button>
            </th>
            <th colSpan="5">
              <h2>
                {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
              </h2>
            </th>
            <th>
              <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1))}>
                Next Month
              </button>
            </th>
          </tr>
          <tr>
            {daysOfWeek.map(day => (
              <th key={day}>{day}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {daysInMonth.reduce((rows, day, index) => {
            if (index % 7 === 0) rows.push([]);
            rows[rows.length - 1].push(day);
            return rows;
          }, []).map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((day, cellIndex) => (
                <td key={cellIndex}>{day}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Calendar;



===============

import React, { useState } from 'react';
import './Calendar.css'; // Import the CSS file

function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());

  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    const firstDay = new Date(year, month, 1).getDay(); // 0 = Sunday, 1 = Monday, ...

    const daysInMonth = [];

    // Fill in the days before the first day of the month with empty slots
    for (let i = 0; i < firstDay; i++) {
      daysInMonth.push(null);
    }

    // Fill in the days of the month
    for (let day = 1; day <= lastDay; day++) {
      daysInMonth.push(day);
    }

    return daysInMonth;
  };

  const daysInMonth = getDaysInMonth();
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  return (
    <div className="calendar-container">
      <table>
        <thead>
          <tr>
            <th>
              <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1))}>
                Previous Month
              </button>
            </th>
            <th colSpan="5">
              <h2>
                {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
              </h2>
            </th>
            <th>
              <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1))}>
                Next Month
              </button>
            </th>
          </tr>
          <tr>
            {daysOfWeek.map(day => (
              <th key={day}>{day}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {daysInMonth.reduce((rows, day, index) => {
            if (index % 7 === 0) rows.push([]);
            rows[rows.length - 1].push(day);
            return rows;
          }, []).map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((day, cellIndex) => (
                <td key={cellIndex}>{day}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Calendar;


===========================

import React, { useState } from 'react';
import './Calendar.css'; // Import the CSS file

function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());

  // Function to get the days in a month for the current date
  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    const firstDayOfWeek = new Date(year, month, 1).getDay(); // 0 = Sunday, 1 = Monday, ...

    const daysInMonth = [];

    // Fill in the days before the first day of the month with empty slots
    for (let i = 0; i < firstDayOfWeek; i++) {
      daysInMonth.push(null);
    }

    // Fill in the days of the month
    for (let day = 1; day <= lastDay; day++) {
      daysInMonth.push(day);
    }

    return daysInMonth;
  };

  const daysInMonth = getDaysInMonth();
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  return (
    <div className="calendar-container">
      <table>
        <thead>
          <tr>
            {daysOfWeek.map(day => (
              <th key={day}>{day}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {daysInMonth.reduce((rows, day, index) => {
            if (index % 7 === 0) rows.push([]);
            rows[rows.length - 1].push(day);
            return rows;
          }, []).map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((day, cellIndex) => (
                <td key={cellIndex}>{day}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Calendar;
================

import React, { useState } from 'react';
import './Calendar.css'; // Import the CSS file

function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());

  // Function to get the days in a month for the current date
  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    const firstDayOfWeek = new Date(year, month, 1).getDay(); // 0 = Sunday, 1 = Monday, ...

    const daysInMonth = [];

    // Fill in the days of the week as a header
    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

    // Fill in the days before the first day of the month with empty slots
    for (let i = 0; i < firstDayOfWeek; i++) {
      daysInMonth.push(null);
    }

    // Fill in the days of the month
    for (let day = 1; day <= lastDay; day++) {
      daysInMonth.push(day);
    }

    return { daysInMonth, daysOfWeek };
  };

  const { daysInMonth, daysOfWeek } = getDaysInMonth();

  return (
    <div className="calendar-container">
      <table>
        <thead>
          <tr>
            {daysOfWeek.map(day => (
              <th key={day}>{day}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {daysInMonth.reduce((rows, day, index) => {
            if (index % 7 === 0) rows.push([]);
            rows[rows.length - 1].push(day);
            return rows;
          }, []).map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((day, cellIndex) => (
                <td key={cellIndex}>{day}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Calendar;

=======================


import React, { useState } from 'react';
import './Calendara.css'; // Import the CSS file

function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());

  // Function to get the days in a month for the current date
  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    const firstDayOfWeek = new Date(year, month, 1).getDay(); // 0 = Sunday, 1 = Monday, ...

    const daysInMonth = [];

    // Fill in the days before the first day of the month with empty slots
    for (let i = 0; i < firstDayOfWeek; i++) {
      daysInMonth.push(null);
    }

    // Fill in the days of the month
    for (let day = 1; day <= lastDay; day++) {
      daysInMonth.push(day);
    }

    return daysInMonth;
  };

  const daysInMonth = getDaysInMonth();
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  return (
    <div className="calendar-container">
      <header>
        <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1))}>
          Previous Month
        </button>
        <h2>
          {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
        </h2>
        <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1))}>
          Next Month
        </button>
      </header>

      <table>
        <thead>
          <tr>
            {daysOfWeek.map(day => (
              <th key={day}>{day}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {daysInMonth.reduce((rows, day, index) => {
            if (index % 7 === 0) rows.push([]);
            rows[rows.length - 1].push(day);
            return rows;
          }, []).map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((day, cellIndex) => (
                <td key={cellIndex}>{day}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Calendar;



================== 

/* Calendar.css */

.calendar-container {
  font-family: Arial, sans-serif;
  border: 1px solid #ccc;
  padding: 20px;
  background-color: #fff;
  width: 40%;
  /* margin-top: 20px;  */
  margin-top: 93px;




  margin-left: auto;
}

.calendar-container header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 40px;
  /* margin-top: 2410px; */
  margin-top: 3713px;


  width: 29.5%;
}

.calendar-container button {
  background-color: #007acc;
  color: #fff;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
}

.calendar-container table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px; /* Add margin to space content below the header */
}

.calendar-container th,
.calendar-container td {
  border: 1px solid #ccc;
  padding: 5px;
  text-align: center;
  width: 14.2857%;
}

.calendar-container th {
  background-color: #007acc;
  color: #fff;
}

.calendar-container td.null {
  background-color: #f7f7f7;
}

===================

import React, { useState } from 'react';
import './Calendara.css'; // Import the CSS file

function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());

  // Function to get the days in a month for the current date
  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    const firstDayOfWeek = new Date(year, month, 1).getDay(); // 0 = Sunday, 1 = Monday, ...

    const daysInMonth = [];

    // Fill in the days before the first day of the month with empty slots
    for (let i = 0; i < firstDayOfWeek; i++) {
      daysInMonth.push(null);
    }

    // Fill in the days of the month
    for (let day = 1; day <= lastDay; day++) {
      daysInMonth.push(day);
    }

    return daysInMonth;
  };

  const daysInMonth = getDaysInMonth();
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  return (
    <div className="calendar-container">
      <header>
        <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1))}>
          Previous Month
        </button>
        <h2>
          {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
        </h2>
        <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1))}>
          Next Month
        </button>
      </header>

      <table>
        <thead>
          <tr>
            {daysOfWeek.map(day => (
              <th key={day}>{day}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {daysInMonth.reduce((rows, day, index) => {
            if (index % 7 === 0) rows.push([]);
            rows[rows.length - 1].push(day);
            return rows;
          }, []).map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((day, cellIndex) => (
                <td key={cellIndex}>{day}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Calendar;

================


import React, { useState } from 'react';
import './Calendara.css'; // Import the CSS file

function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());

  // Function to get the days in a month for the current date
  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    const firstDayOfWeek = new Date(year, month, 1).getDay(); // 0 = Sunday, 1 = Monday, ...

    const daysInMonth = [];

    // Fill in the days before the first day of the month with empty slots
    for (let i = 0; i < firstDayOfWeek; i++) {
      daysInMonth.push(null);
    }

    // Fill in the days of the month
    for (let day = 1; day <= lastDay; day++) {
      daysInMonth.push(day);
    }

    return daysInMonth;
  };

  const daysInMonth = getDaysInMonth();
  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  return (
    <div className="calendar-container">
      <header>
        <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1))}>
          Previous Month
        </button>
        <h2>
          {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
        </h2>
        <button onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1))}>
          Next Month
        </button>
      </header>

      <table>
        <thead>
          <tr>
            {daysOfWeek.map(day => (
              <th key={day}>{day}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {daysInMonth.reduce((rows, day, index) => {
            if (index % 7 === 0) rows.push([]);
            rows[rows.length - 1].push(day);
            return rows;
          }, []).map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((day, cellIndex) => (
                <td key={cellIndex}>{day}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Calendar;


====================


